//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\adria\OneDrive\Documentos\TP-DDS-Grupo13\TPDDS2017_GRUPO13_DONDE_INVIERTO\ANTLR\ANTLR\GMetodologias.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ANTLR.ANTLR {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class GMetodologiasParser : Parser {
	public const int
		OPERADOR=1, INDICADOR=2, WS=3;
	public const int
		RULE_metodologia = 0, RULE_compileUnit = 1;
	public static readonly string[] ruleNames = {
		"metodologia", "compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPERADOR", "INDICADOR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GMetodologias.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GMetodologiasParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class MetodologiaContext : ParserRuleContext {
		public ITerminalNode[] INDICADOR() { return GetTokens(GMetodologiasParser.INDICADOR); }
		public ITerminalNode INDICADOR(int i) {
			return GetToken(GMetodologiasParser.INDICADOR, i);
		}
		public ITerminalNode OPERADOR() { return GetToken(GMetodologiasParser.OPERADOR, 0); }
		public MetodologiaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metodologia; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGMetodologiasListener typedListener = listener as IGMetodologiasListener;
			if (typedListener != null) typedListener.EnterMetodologia(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGMetodologiasListener typedListener = listener as IGMetodologiasListener;
			if (typedListener != null) typedListener.ExitMetodologia(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGMetodologiasVisitor<TResult> typedVisitor = visitor as IGMetodologiasVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetodologia(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetodologiaContext metodologia() {
		MetodologiaContext _localctx = new MetodologiaContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_metodologia);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4; Match(INDICADOR);
			State = 5; Match(OPERADOR);
			State = 6; Match(INDICADOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GMetodologiasParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGMetodologiasListener typedListener = listener as IGMetodologiasListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGMetodologiasListener typedListener = listener as IGMetodologiasListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGMetodologiasVisitor<TResult> typedVisitor = visitor as IGMetodologiasVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x5\r\x4\x2\t\x2"+
		"\x4\x3\t\x3\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x2\x2\x2\x4\x2\x2"+
		"\x4\x2\x2\x2\n\x2\x6\x3\x2\x2\x2\x4\n\x3\x2\x2\x2\x6\a\a\x4\x2\x2\a\b"+
		"\a\x3\x2\x2\b\t\a\x4\x2\x2\t\x3\x3\x2\x2\x2\n\v\a\x2\x2\x3\v\x5\x3\x2"+
		"\x2\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ANTLR.ANTLR
