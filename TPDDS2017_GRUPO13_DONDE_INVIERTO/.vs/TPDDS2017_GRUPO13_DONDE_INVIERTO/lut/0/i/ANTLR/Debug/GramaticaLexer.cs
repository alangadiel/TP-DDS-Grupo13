//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\adria\OneDrive\Documentos\TP-DDS-Grupo13\TPDDS2017_GRUPO13_DONDE_INVIERTO\ANTLR\ANTLR\Gramatica.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ANTLR {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class GramaticaLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, TERMINO=8, NUMERO=9, 
		CONSTANTE=10, CUENTA=11, WS=12;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "TERMINO", "NUMERO", 
		"CONSTANTE", "CUENTA", "WS"
	};


	public GramaticaLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'^'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "TERMINO", "NUMERO", "CONSTANTE", 
		"CUENTA", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gramatica.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\xE[\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x3\x2\x3\x2\x3\x3\x3\x3\x3"+
		"\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\t\x5"+
		"\t-\n\t\x3\n\x3\n\a\n\x31\n\n\f\n\xE\n\x34\v\n\x3\v\x6\v\x37\n\v\r\v\xE"+
		"\v\x38\x3\v\x6\v<\n\v\r\v\xE\v=\x5\v@\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x5\fV\n\f\x3\r\x3\r\x3\r\x3\r\x2\x2\x2\xE\x3\x2\x3\x5\x2\x4\a\x2\x5"+
		"\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19"+
		"\x2\xE\x3\x2\x3\x5\x2\v\f\xF\xF\"\"\x64\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2"+
		"\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2"+
		"\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3"+
		"\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x3\x1B\x3\x2\x2\x2\x5"+
		"\x1D\x3\x2\x2\x2\a\x1F\x3\x2\x2\x2\t!\x3\x2\x2\x2\v#\x3\x2\x2\x2\r%\x3"+
		"\x2\x2\x2\xF\'\x3\x2\x2\x2\x11,\x3\x2\x2\x2\x13.\x3\x2\x2\x2\x15?\x3\x2"+
		"\x2\x2\x17U\x3\x2\x2\x2\x19W\x3\x2\x2\x2\x1B\x1C\a-\x2\x2\x1C\x4\x3\x2"+
		"\x2\x2\x1D\x1E\a/\x2\x2\x1E\x6\x3\x2\x2\x2\x1F \a,\x2\x2 \b\x3\x2\x2\x2"+
		"!\"\a\x31\x2\x2\"\n\x3\x2\x2\x2#$\a`\x2\x2$\f\x3\x2\x2\x2%&\a*\x2\x2&"+
		"\xE\x3\x2\x2\x2\'(\a+\x2\x2(\x10\x3\x2\x2\x2)-\x5\x13\n\x2*-\x5\x15\v"+
		"\x2+-\x5\x17\f\x2,)\x3\x2\x2\x2,*\x3\x2\x2\x2,+\x3\x2\x2\x2-\x12\x3\x2"+
		"\x2\x2.\x32\x4\x33;\x2/\x31\x4\x32;\x2\x30/\x3\x2\x2\x2\x31\x34\x3\x2"+
		"\x2\x2\x32\x30\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\x14\x3\x2\x2\x2\x34"+
		"\x32\x3\x2\x2\x2\x35\x37\x4\x63|\x2\x36\x35\x3\x2\x2\x2\x37\x38\x3\x2"+
		"\x2\x2\x38\x36\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39@\x3\x2\x2\x2:<\x4\x43"+
		"\\\x2;:\x3\x2\x2\x2<=\x3\x2\x2\x2=;\x3\x2\x2\x2=>\x3\x2\x2\x2>@\x3\x2"+
		"\x2\x2?\x36\x3\x2\x2\x2?;\x3\x2\x2\x2@\x16\x3\x2\x2\x2\x41\x42\aG\x2\x2"+
		"\x42\x43\a\x44\x2\x2\x43\x44\aK\x2\x2\x44\x45\aV\x2\x2\x45\x46\a\x46\x2"+
		"\x2\x46V\a\x43\x2\x2GH\aH\x2\x2HI\a\x46\x2\x2IV\aU\x2\x2JK\aH\x2\x2KL"+
		"\a\x45\x2\x2LV\aH\x2\x2MN\aK\x2\x2NO\aP\x2\x2OP\aQ\x2\x2PV\a\x46\x2\x2"+
		"QR\aK\x2\x2RS\aP\x2\x2ST\aQ\x2\x2TV\a\x45\x2\x2U\x41\x3\x2\x2\x2UG\x3"+
		"\x2\x2\x2UJ\x3\x2\x2\x2UM\x3\x2\x2\x2UQ\x3\x2\x2\x2V\x18\x3\x2\x2\x2W"+
		"X\t\x2\x2\x2XY\x3\x2\x2\x2YZ\b\r\x2\x2Z\x1A\x3\x2\x2\x2\t\x2,\x32\x38"+
		"=?U\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ANTLR
