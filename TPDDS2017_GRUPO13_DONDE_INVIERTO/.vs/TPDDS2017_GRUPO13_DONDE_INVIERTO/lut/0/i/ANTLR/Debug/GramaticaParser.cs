//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\adria\OneDrive\Documentos\TP-DDS-Grupo13\TPDDS2017_GRUPO13_DONDE_INVIERTO\ANTLR\ANTLR\Gramatica.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ANTLR {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class GramaticaParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, TERMINO=8, NUMERO=9, 
		CONSTANTE=10, CUENTA=11, WS=12;
	public const int
		RULE_indicador = 0, RULE_producto = 1, RULE_factor = 2, RULE_exponente = 3, 
		RULE_compileUnit = 4;
	public static readonly string[] ruleNames = {
		"indicador", "producto", "factor", "exponente", "compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'^'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "TERMINO", "NUMERO", "CONSTANTE", 
		"CUENTA", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gramatica.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GramaticaParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class IndicadorContext : ParserRuleContext {
		public ProductoContext producto() {
			return GetRuleContext<ProductoContext>(0);
		}
		public IndicadorContext indicador() {
			return GetRuleContext<IndicadorContext>(0);
		}
		public IndicadorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indicador; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterIndicador(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitIndicador(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndicador(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndicadorContext indicador() {
		IndicadorContext _localctx = new IndicadorContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_indicador);
		int _la;
		try {
			State = 15;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10; producto();
				{
				State = 11;
				_la = _input.La(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12; indicador();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14; producto();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProductoContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ProductoContext producto() {
			return GetRuleContext<ProductoContext>(0);
		}
		public ProductoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_producto; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterProducto(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitProducto(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProducto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProductoContext producto() {
		ProductoContext _localctx = new ProductoContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_producto);
		int _la;
		try {
			State = 22;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 17; factor();
				{
				State = 18;
				_la = _input.La(1);
				if ( !(_la==T__2 || _la==T__3) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 19; producto();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 21; factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public ExponenteContext exponente() {
			return GetRuleContext<ExponenteContext>(0);
		}
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_factor);
		try {
			State = 29;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; exponente();
				{
				State = 25; Match(T__4);
				State = 26; factor();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 28; exponente();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponenteContext : ParserRuleContext {
		public IndicadorContext indicador() {
			return GetRuleContext<IndicadorContext>(0);
		}
		public ITerminalNode TERMINO() { return GetToken(GramaticaParser.TERMINO, 0); }
		public ExponenteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponente; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterExponente(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitExponente(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponente(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExponenteContext exponente() {
		ExponenteContext _localctx = new ExponenteContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_exponente);
		try {
			State = 36;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 31; Match(T__5);
				State = 32; indicador();
				State = 33; Match(T__6);
				}
				break;
			case TERMINO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35; Match(TERMINO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GramaticaParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xE+\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x5\x2\x12\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x19\n\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4 \n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5"+
		"\x5\'\n\x5\x3\x6\x3\x6\x3\x6\x2\x2\x2\a\x2\x2\x4\x2\x6\x2\b\x2\n\x2\x2"+
		"\x4\x3\x2\x3\x4\x3\x2\x5\x6)\x2\x11\x3\x2\x2\x2\x4\x18\x3\x2\x2\x2\x6"+
		"\x1F\x3\x2\x2\x2\b&\x3\x2\x2\x2\n(\x3\x2\x2\x2\f\r\x5\x4\x3\x2\r\xE\t"+
		"\x2\x2\x2\xE\xF\x5\x2\x2\x2\xF\x12\x3\x2\x2\x2\x10\x12\x5\x4\x3\x2\x11"+
		"\f\x3\x2\x2\x2\x11\x10\x3\x2\x2\x2\x12\x3\x3\x2\x2\x2\x13\x14\x5\x6\x4"+
		"\x2\x14\x15\t\x3\x2\x2\x15\x16\x5\x4\x3\x2\x16\x19\x3\x2\x2\x2\x17\x19"+
		"\x5\x6\x4\x2\x18\x13\x3\x2\x2\x2\x18\x17\x3\x2\x2\x2\x19\x5\x3\x2\x2\x2"+
		"\x1A\x1B\x5\b\x5\x2\x1B\x1C\a\a\x2\x2\x1C\x1D\x5\x6\x4\x2\x1D \x3\x2\x2"+
		"\x2\x1E \x5\b\x5\x2\x1F\x1A\x3\x2\x2\x2\x1F\x1E\x3\x2\x2\x2 \a\x3\x2\x2"+
		"\x2!\"\a\b\x2\x2\"#\x5\x2\x2\x2#$\a\t\x2\x2$\'\x3\x2\x2\x2%\'\a\n\x2\x2"+
		"&!\x3\x2\x2\x2&%\x3\x2\x2\x2\'\t\x3\x2\x2\x2()\a\x2\x2\x3)\v\x3\x2\x2"+
		"\x2\x6\x11\x18\x1F&";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ANTLR
